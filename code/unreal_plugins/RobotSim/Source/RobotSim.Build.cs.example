// Copyright Epic Games, Inc. All Rights Reserved.

using UnrealBuildTool;
using System;
using System.IO;

public class SystemConfig
{
    public const String EIGEN_INCLUDE_DIR = "/usr/local/include/eigen3";

    public const String RBDL_INCLUDE_DIR = "/Users/mroberts/code/github/rbdl/include";
    public const String RBDL_CONFIG_INCLUDE_DIR = "/Users/mroberts/code/github/rbdl/BUILD/include";
    public const String RBDL_URDF_READER_INCLUDE_DIR = "/Users/mroberts/code/github";
    public const String RBDL_LIB_DIR = "/Users/mroberts/code/github/rbdl/BUILD";
    public const String RBDL_URDF_READER_LIB_DIR = "/Users/mroberts/code/github/rbdl/BUILD/addons/urdfreader";
}

public class RobotSim : ModuleRules
{
    private void setupEigen(ReadOnlyTargetRules Target)
    {
        PublicIncludePaths.Add(SystemConfig.EIGEN_INCLUDE_DIR);
    }

    private void setupRBDL(ReadOnlyTargetRules Target)
    {
        PublicIncludePaths.Add(SystemConfig.RBDL_INCLUDE_DIR);
        PublicIncludePaths.Add(SystemConfig.RBDL_CONFIG_INCLUDE_DIR);
        PublicIncludePaths.Add(SystemConfig.RBDL_URDF_READER_INCLUDE_DIR);

        if (Target.Platform == UnrealTargetPlatform.Win64)
        {
            PublicAdditionalLibraries.Add(Path.Combine(SystemConfig.RBDL_LIB_DIR, "rbdl.lib"));
            PublicAdditionalLibraries.Add(Path.Combine(SystemConfig.RBDL_URDF_READER_LIB_DIR, "rbdl_urdfreader.lib"));
        }
        else if (Target.Platform == UnrealTargetPlatform.Mac)
        {
            PublicAdditionalLibraries.Add(Path.Combine(SystemConfig.RBDL_LIB_DIR, "librbdl.a"));
            PublicAdditionalLibraries.Add(Path.Combine(SystemConfig.RBDL_URDF_READER_LIB_DIR, "librbdl_urdfreader.a"));
        }
        else if (Target.Platform == UnrealTargetPlatform.Linux)
        {
            PublicAdditionalLibraries.Add(Path.Combine(SystemConfig.RBDL_LIB_DIR, "librbdl.a"));
            PublicAdditionalLibraries.Add(Path.Combine(SystemConfig.RBDL_URDF_READER_LIB_DIR, "librbdl_urdfreader.a"));
        }
    }

    private void setupVHACD(ReadOnlyTargetRules Target)
    {
        string VHACDDirectory = Target.UEThirdPartySourceDirectory + "VHACD/";
        string VHACDLibPath = VHACDDirectory;
        PublicIncludePaths.Add(VHACDDirectory + "public");

        if (Target.Platform == UnrealTargetPlatform.Win64)
        {
            VHACDLibPath = VHACDLibPath + "lib/Win64/VS" + Target.WindowsPlatform.GetVisualStudioCompilerVersionName() + "/";
            PublicLibraryPaths.Add(VHACDLibPath);

            if (Target.Configuration == UnrealTargetConfiguration.Debug && Target.bDebugBuildsActuallyUseDebugCRT)
            {
                PublicAdditionalLibraries.Add("VHACDd.lib");
            }
            else
            {
                PublicAdditionalLibraries.Add("VHACD.lib");
            }
        }
        else if (Target.Platform == UnrealTargetPlatform.Mac)
        {
            string LibPath = VHACDDirectory + "Lib/Mac/";
            if (Target.Configuration == UnrealTargetConfiguration.Debug && Target.bDebugBuildsActuallyUseDebugCRT)
            {
                PublicAdditionalLibraries.Add(LibPath + "libVHACD_LIBd.a");
            }
            else
            {
                PublicAdditionalLibraries.Add(LibPath + "libVHACD_LIB.a");
            }
            PublicFrameworks.AddRange(new string[] { "OpenCL" });
        }
        else if (Target.Platform == UnrealTargetPlatform.Linux)
        {
            if (Target.LinkType == TargetLinkType.Monolithic)
            {
                PublicAdditionalLibraries.Add(VHACDDirectory + "Lib/Linux/" + Target.Architecture + "/libVHACD.a");
            }
            else
            {
                PublicAdditionalLibraries.Add(VHACDDirectory + "Lib/Linux/" + Target.Architecture + "/libVHACD_fPIC.a");
            }
        }
    }

    public RobotSim(ReadOnlyTargetRules Target) : base(Target)
    {
        // module settings
        OptimizeCode = CodeOptimization.Never;
        PCHUsage = PCHUsageMode.UseExplicitOrSharedPCHs;
        bEnableExceptions = true;

        
        PublicIncludePaths.AddRange(
            new string[] {
                // ... add public include paths required here ...
            }
            );
                
        
        PrivateIncludePaths.AddRange(
            new string[] {
                // ... add other private include paths required here ...
            }
            );
            
        
        PublicDependencyModuleNames.AddRange(
            new string[]
            {
                "Core",
                // ... add other public dependencies that you statically link with here ...

                "CoreUObject", "Engine", "InputCore", "ImageWrapper", "RenderCore", "RHI",
                //"PhysXVehicles",
                "ProceduralMeshComponent",
                "Landscape", "XmlParser", "APEX", "PhysX",
                "PhysXVehicleLib", "Foliage", "PhysicsCore"
            }
            );
            
        
        PrivateDependencyModuleNames.AddRange(
            new string[]
            {
                "Core", "CoreUObject",
                "Engine",
                "Slate",
                "SlateCore",
                // ... add private dependencies that you statically link with here ...  
                "ProceduralMeshComponent",
                "UMG",  "PhysX",
                //"PhysXVehicles",
                "PhysXVehicleLib" 
            }
            );
        
        
        DynamicallyLoadedModuleNames.AddRange(
            new string[]
            {
                // ... add any modules that your module loads dynamically here ...
            }
            );

        setupEigen(Target);
        setupRBDL(Target);
        setupVHACD(Target);
    }

}