#
# Copyright(c) 2022 Intel. Licensed under the MIT License <http://opensource.org/licenses/MIT>.
#

SPEAR:

  Instance:

    # Launch Unreal application via different modes:
    # - "standalone" launches a packaged executable of an Unreal Engine project
    # - "uproject" launches an uproject with Unreal Engine editor executable
    # - "none" connects to an already running instance of Unreal Engine
    LAUNCH_MODE: ""

    # If launch_mode is "standalone_exectuable", specify this path to an Unreal application.
    STANDALONE: ""

    # If launch_mode is "uproject", specify this path to your Unreal Engine editor executable.
    EDITOR_EXECUTABLE: ""

    # If launch_mode is "uproject", specify this path to your uproject file.
    UPROJECT: ""

    # The location of downloaded (or built) pak files. This must be specified if you are attempting
    # to load any scene other than the default scene.
    PAKS_DIR: ""

    # Set this parameter to true True to launch the executable in headless mode. Has no effect
    # if launch_mode is "none".
    RENDER_OFFSCREEN: False

    # If not running in headless mode, these parameters specify the window resolution used for
    # on-screen rendering. Has no effect on the size of the visual observations returned by the
    # application via the RPC server.
    WINDOW_RESOLUTION_X: 1024
    WINDOW_RESOLUTION_Y: 1024

    # Launch your Unreal application on the GPU specified by GPU_ID.
    GPU_ID: 0

    # Log file to capture Unreal debug output that isn't captured by STDOUT and STDERR. This is
    # useful for inspecting the stack trace when an Unreal application crashes. Note that Unreal
    # only writes to this log file in Development builds. If a path is included, it will be
    # interpreted as a relative path regardless of how it is formatted, and will be interpreted
    # as relative to the following locations:
    # - Windows: path\to\spear\cpp\unreal_projects\SpearSim\Standalone-Development\Windows\SpearSim\Saved\Logs
    # - macOS:   ~/Library/Logs/SpearSim
    # - Linux:   path\to\spear\cpp\unreal_projects\SpearSim\Standalone-Development/Linux/SpearSim/Saved/Logs
    UNREAL_INTERNAL_LOG_FILE: ""

    # Path to a temp dir for files generated by the spear Python package
    TEMP_DIR: "tmp"

    # List of custom command-line arguments passed to the Unreal application. This is useful
    # when the Unreal application is built with a plugin that expects its own set of
    # command-line arguments.
    CUSTOM_COMMAND_LINE_ARGUMENTS: []

    # This parameter can be used for additional control over which Vulkan devices are recognized
    # by Unreal. This parameter can be useful to force Unreal to use an NVIDIA GPU. Only has an
    # effect on Linux. See the following link for details:
    #     https://github.com/KhronosGroup/Vulkan-LoaderAndValidationLayers/blob/master/loader/LoaderAndLayerInterface.md
    VK_ICD_FILENAMES: ""

    REQUEST_CLOSE_UNREAL_INSTANCE_SLEEP_TIME_SECONDS: 1.0

    # Maximum time to wait when initializing the RPC client
    INITIALIZE_RPC_CLIENT_MAX_TIME_SECONDS: 120.0

    # Sleep for this amount of time in-between attempts to initialize the RPC client
    INITIALIZE_RPC_CLIENT_SLEEP_TIME_SECONDS: 1.0

    # The RPC client will try this number of reconnection attempts before returning from its
    # constructor.
    RPC_CLIENT_INTERNAL_RECONNECT_LIMIT: 1

    # Once a connection has been established, the RPC client will wait for this amount of
    # time before throwing when calling a server function.
    RPC_CLIENT_INTERNAL_TIMEOUT_SECONDS: 5.0

    # The maximum number of ticks to execute during env.reset() before giving up. This is
    # useful in situations where the physics simulation does not successfully settle down
    # after calling env.reset().
    MAX_NUM_TICKS_AFTER_RESET: 10

    # Number of ticks to execute after launching the Unreal instance. This is useful to warm up
    # various caches and rendering features that leverage temporal coherence between frames.
    NUM_EXTRA_WARMUP_TICKS: 20
